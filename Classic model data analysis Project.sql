use classicmodels;
-- Task 1: List all customers with their sales representativeâ€™s name.
SELECT 
    c.customerNumber,
    c.customerName,
    e.firstName,
    e.lastName
FROM customers c
JOIN employees e
ON c.salesRepEmployeeNumber = e.employeeNumber;

-- Task 2: Find total number of orders placed by each customer.
SELECT 
    customerNumber, 
    COUNT(orderNumber) AS totalOrders
FROM orders
GROUP BY customerNumber;

-- Task 3: Display orders shipped to USA with order status.
SELECT 
    orderNumber, 
    orderDate, 
    status
FROM orders
WHERE customerNumber IN (
    SELECT customerNumber FROM customers WHERE country = 'USA'
);

-- Task 4: Top 5 products with highest quantity in stock.
SELECT 
    productCode, 
    productName, 
    quantityInStock
FROM products
ORDER BY quantityInStock DESC
LIMIT 5;

-- Task 5: Total sales for each customer.
SELECT 
    c.customerName,
    SUM(od.quantityOrdered * od.priceEach) AS totalSales
FROM customers c
JOIN orders o ON c.customerNumber = o.customerNumber
JOIN orderdetails od ON o.orderNumber = od.orderNumber
GROUP BY c.customerName
ORDER BY totalSales DESC;

-- Task 6: Get employees working under each manager.
SELECT 
    e.employeeNumber, 
    e.firstName, 
    e.lastName, 
    e.jobTitle, 
    m.firstName AS managerFirstName, 
    m.lastName AS managerLastName
FROM employees e
LEFT JOIN employees m 
ON e.reportsTo = m.employeeNumber;

-- Task 7: Customers who have not placed any orders.
SELECT 
    c.customerNumber, 
    c.customerName
FROM customers c
LEFT JOIN orders o ON c.customerNumber = o.customerNumber
WHERE o.orderNumber IS NULL;

-- Task 8: Total payment received by each customer.
SELECT 
    customerNumber, 
    SUM(amount) AS totalPayment
FROM payments
GROUP BY customerNumber;

-- Task 9: Find out highest single payment received.
SELECT 
    customerNumber, 
    amount, 
    paymentDate
FROM payments
ORDER BY amount DESC
LIMIT 1;

-- Task 10: Total revenue generated by product line.
SELECT 
    p.productLine,
    SUM(od.quantityOrdered * od.priceEach) AS totalRevenue
FROM products p
JOIN orderdetails od ON p.productCode = od.productCode
GROUP BY p.productLine
ORDER BY totalRevenue DESC;

-- Task 11: Customers from 'France' who ordered more than 3 times.
SELECT 
    c.customerName, 
    COUNT(o.orderNumber) AS ordersCount
FROM customers c
JOIN orders o ON c.customerNumber = o.customerNumber
WHERE c.country = 'France'
GROUP BY c.customerName
HAVING ordersCount > 3;

-- Task 12: List orders which took more than 15 days to ship.
SELECT 
    orderNumber, 
    orderDate, 
    shippedDate, 
    DATEDIFF(shippedDate, orderDate) AS shippingDays
FROM orders
WHERE DATEDIFF(shippedDate, orderDate) > 15;

-- Task 13: Show monthly sales for year 2005.
SELECT 
    MONTH(paymentDate) AS month, 
    SUM(amount) AS monthlySales
FROM payments
WHERE YEAR(paymentDate) = 2005
GROUP BY MONTH(paymentDate)
ORDER BY month;

-- Task 14: List top 3 customers by total revenue.
SELECT 
    c.customerName,
    SUM(od.quantityOrdered * od.priceEach) AS totalRevenue
FROM customers c
JOIN orders o ON c.customerNumber = o.customerNumber
JOIN orderdetails od ON o.orderNumber = od.orderNumber
GROUP BY c.customerName
ORDER BY totalRevenue DESC
LIMIT 3;

-- Task 15: Create a view for product stock monitoring.
CREATE VIEW product_stock AS
SELECT 
    productCode, 
    productName, 
    quantityInStock
FROM products
WHERE quantityInStock < 1000;













